



(declare string_length_non_empty (! s term (! p (holds (not (= s emptystr))) (holds (not (= (str.len s) (int 0)))))))

(declare concat_eq_rtl_simple (! s term (! t term (! x term (! p (holds (= (str.++ s x) (str.++ t x))) (holds (= s t)))))))

(program sc_concat_eq_ltr_simple ((s term) (t term)) term 
  (ifequal (str.head s) (str.head t) (apply (apply f_= (str.tail s)) (str.tail t)) (fail term))   
)

(declare concat_eq_ltr_simple (! s term 
                              (! t term 
                              (! res term 
                              (! p (holds (= s t)) 
                              (! r (^ (sc_concat_eq_ltr_simple s t) res) 
                                (holds res))))))) 

; -------------------------------------


(declare string_length_pos (! t term 
  (holds (or (and (= (str.len t) (int 0)) (and (= t emptystr) true)) (or (int.> (str.len t) (int 0)) false)))))

(declare re_inter (! x term (! s term (! t term (! p1 (holds (str.in_re x s)) (! p2 (holds (str.in_re x t)) 
  (holds (str.in_re x (re.inter s t)))))))))

(declare string_reduction (! r term (! n mpz (! s sort (! t term (! u (^ (sc_string_reduction t (skolem (witness n s (= (bvar n s) t)))) r) 
  (holds (and r (and (= t (skolem (witness n s (= (bvar n s) t)))) true)))))))))

(declare re_unfold_pos (! t term (! r term (! s term (! f (holds (str.in_re t r)) (! u (^ (sc_re_unfold_pos t r) s) (holds s)))))))
