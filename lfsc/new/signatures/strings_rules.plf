



(declare string_length_non_empty (! s term (! p (holds (not (= s emptystr))) (holds (not (= (str.len s) (int 0)))))))

(declare concat_eq_rtl_simple (! s term (! t term (! x term (! p (holds (= (str.++ s x) (str.++ t x))) (holds (= s t)))))))

; strip equal prefix of s and t
(program sc_strip_prefix ((s term) (t term)) termPair
  (match s
    ((apply s1 s2)
      (match s1
        ((apply f_str.++ s12)
        (match t
          ((apply t1 t2)
          (match t1
            ((apply f_str.++ t12)
            (ifequal s12 t12
              (sc_strip_prefix s2 t2) 
              (pair s t)))))
          (emptystr (pair s t))))))
    (emptystr (pair s t)))
)

(program sc_concat_eq ((s term) (t term) (rev flag)) term
  (match 
    (sc_strip_prefix 
      (sc_string_rev (sc_string_singleton_intro s) rev) 
      (sc_string_rev (sc_string_singleton_intro t) rev))
    ((pair ss ts) 
       (= (sc_string_singleton_elim (sc_string_rev ss rev)) 
          (sc_string_singleton_elim (sc_string_rev ts rev)))
          
          ))
)


(declare concat_eq (! s term 
                   (! t term 
                   (! res term 
                   (! rev flag
                   (! p (holds (= s t))
                   (! r (^ (sc_concat_eq s t rev) res) 
                      (holds res))))))))

; -------------------------------------


(declare string_length_pos (! t term 
  (holds (or (and (= (str.len t) (int 0)) (and (= t emptystr) true)) (or (int.> (str.len t) (int 0)) false)))))

(declare re_inter (! x term (! s term (! t term (! p1 (holds (str.in_re x s)) (! p2 (holds (str.in_re x t)) 
  (holds (str.in_re x (re.inter s t)))))))))

(declare string_reduction (! r term (! t term (! u (^ (sc_string_reduction t) r)
  (holds (and r (and (= t (skolem t)) true)))))))))
(declare string_eager_reduction (! r term (! t term (! u (^ (sc_string_eager_reduction t) r)
  (holds r)))))

(declare re_unfold_pos (! t term (! r term (! s term (! f (holds (str.in_re t r)) (! u (^ (sc_re_unfold_pos t r) s) (holds s)))))))
