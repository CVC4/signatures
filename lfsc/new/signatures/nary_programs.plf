
; remove the first occurrence of l from t, where t is an n-ary, null-terminated chain
(program nary_rm_first ((f term) (t term) (l term)) term
  (match t
    ((apply t1 t2)  ; otherwise at end, l not found
      (match t1
        ((apply f t12) (ifequal t12 l t2 (apply t1 (nary_rm_first f t2 l)))))))   ; otherwise not in n-ary form (for f)
)

; also checks t == l, return nt if so, where nt is a null terminator
(program nary_rm_first_or_self ((f term) (t term) (l term) (nt term)) term
  (ifequal t l nt (nary_rm_first f t l))
)

; does t contain l? where t is an n-ary, null-terminated chain
(program nary_ctn ((f term) (t term) (l term)) flag
  (match t
    ((apply t1 t2)
      (match t1
        ((apply f t12) (ifequal t12 l tt (nary_ctn f t2 l)))))   ; otherwise not in n-ary form
    (default ff))
)

; also checks t == l
(program nary_ctn_or_self ((f term) (t term) (l term)) flag
  (ifequal t l tt (nary_ctn f t l))
)

; returns true if n-ary null-terminated chain t is a subset of s, interpreted as sets
(program nary_is_subset ((f term) (t term) (s term)) flag
  (match t
    ((apply t1 t2) 
      (match t1
        ((apply f t12) (ifequal (nary_ctn_or_self f s t12) tt (nary_is_subset f t2 s) ff)))) ; otherwise not in n-ary form
    (default tt))
)

(program nary_concat ((f term) (t1 term) (t2 term)) term
  (match t1
    ((apply f t12) (apply f (nary_concat f t12 t2)))
    (default t2))    ; any non-application term is interpreted as the end marker
)

; replaces e.g. (or P false) with P
(program nary_singleton_elim ((f term) (t term) (null term)) term
  (match t
    ((apply t1 t2) 
      ; if null terminated at this level, then we return the head, otherwise not in n-ary form
      (ifequal t2 null (match t1 ((apply f t12) t12)) t))
    (default t))
)

; extract the n^th child of n-ary chain of operator f
(program nary_extract ((f term) (t term) (n mpz)) term
  (match t
    ((apply t1 t2)
      (mp_ifzero n 
        (match t1 ((apply f t12) t12))
        (nary_extract f t2 (mp_add n (mp_neg 1)))
      )))
)

(program nary_drop_dups_rec ((f term) (t term)) term
  (match t
    ((apply t1 t2)
      (match t1
        ((apply f t12) 
          (let t2d (nary_drop_dups_rec f t2) 
            (ifequal (nary_ctn f t2d t12) tt t2d (apply t1 t2d))))))
    (default t))
)

(program nary_drop_dups ((f term) (t term) (null term)) term
  (nary_singleton_elim f (nary_drop_dups_rec f t) null)
)
