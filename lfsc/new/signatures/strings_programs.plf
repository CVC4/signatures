
; head and tail for n-ary operators with null terminators
(program str.head ((t term)) term
  (match t ((apply t1 t2) (match t1 ((apply f_str.++ t12) t12)))))
(program str.tail ((t term)) term
  (match t ((apply f_str.++ t2) t2)))

;t = x, s=y ---> (str.++ x y)
;t = (str.++ x1 x2), s = y1 ----> (str.++ x1 (str.++ x2 y1))
;t = (str.++ (str.++ x1 x2) (str.++ y1 y2)), s=y ----> (str.++ (str.++ (str.++ (str.++ x1 x2) y1) y2) y)
(program str.concat ((t term) (s term)) term
  (match t 
    ((apply t1 t2)
      (match t1 ((apply f_str.++ t12) (apply t1 (str.concat t2 s)))))
    (emptystr s))
)



    
    
(program sc_string_reduction ((t term) (k term)) term
  (match t 
    ((apply t1 t2)
      (match t1
        ((apply t11 t12)
          (match t11
            ((apply f_str.substr t112)
              ;    // processing term:  substr( s, n, m )
              ;    // IF    n >=0 AND n < len( s ) AND m > 0
              ;    // THEN: s = k1 ++ k ++ k2 AND
              ;    //       len( k1 ) = n AND
              ;    //       ( len( k2 ) = len( s )-(n+m) OR len( k2 ) = 0 ) AND
              ;    //       len( k ) <= m
              ;    // ELSE: k = ""
              (let npm (apply (apply f_int.+ t12) (apply (apply f_int.+ t2) (int 0)))
              (let k1 (skolem (apply (apply (apply f_str.substr t112) (int 0)) t12)) ; TODO
              (let k2 (skolem (apply (apply (apply f_str.substr t112) npm) (apply (apply f_int.- (apply f_str.len t112)) npm))) ; TODO
              (apply (apply (apply (f_ite Bool) 
                ; condition
                (apply (apply f_and (apply (apply f_int.>= t12) (int 0)))
                  (apply (apply f_and (apply (apply f_int.< t12) (apply f_str.len t112)))
                    (apply (apply f_and (apply (apply f_int.> t2) (int 0)))
                      true))))
                ; if branch
                (apply (apply f_and (apply (apply f_= t112) (apply (apply f_str.++ k1) (apply (apply f_str.++ k) (apply (apply f_str.++ k2) emptystr)))))
                  (apply (apply f_and (apply (apply f_= (apply f_str.len k1)) t12))
                    (apply (apply f_and (apply (apply f_or (apply (apply f_= (apply f_str.len k2)) (apply (apply f_int.- (apply f_str.len t112)) (apply (apply f_int.+ t12) (apply (apply f_int.+ t2) (int 0))))))
                           (apply (apply f_or (apply (apply f_= (apply f_str.len k2)) (int 0)))
                             false)))
                      (apply (apply f_and (apply (apply f_int.<= (apply f_str.len k)) t2))
                        true)))))
                ; else branch
                (apply (apply f_= k) emptystr))
                ))))
            (f_str.contains true)  ; TODO
            ((apply f_str.indexof t112) true)
            ((apply f_str.replace t112) true)
            
            ; str.update
            ; str.from_int
            ; str.to_int
            ; seq.nth
            ; str.replaceall
            ; str.replace_re
            ; str.replace_re_all
            ; str.tolower
            ; str.toupper
            ; str.rev
            ; str.leq
  )))))
)

(program sc_re_unfold_pos ((t term) (r term)) term
; TODO
  (fail term)
)
