; depends: nary_programs.plf

(program sc_resolution ((c1 term) (c2 term) (pol flag) (l term)) term
  (nary_elim f_or
    (nary_concat f_or
      ; TODO: check equal before singleton intro? then use simple nary_rm_first
      (nary_rm_first_or_self f_or (nary_intro f_or c1 false) (ifequal pol tt l (apply f_not l)) false) 
      (nary_rm_first_or_self f_or (nary_intro f_or c2 false) (ifequal pol tt (apply f_not l) l) false)
    false)
  false)
)
 
; (and F1 ... Fn) -> (or (not F1) ... (not Fn))
(program sc_not_and_rec ((t term)) term
  (match t
    ((apply t1 t2)
      (let t12 (getarg f_and t1)
        (apply (apply f_or (apply f_not t12)) (sc_not_and_rec t2))))   ; otherwise not in n-ary form
    (true false))    ; note we must flip true to false
)

(program sc_not_and ((t term)) term
  (nary_elim f_or (sc_not_and_rec t) false)
)

; (or (not F1) ... (not Fn)) -> (and F1 ... Fn)
(program sc_not_and_rev_rec ((t term)) term
  (match t
    ((apply t1 t2)
      (let t12 (getarg f_or t1)
      (let t122 (getarg f_not t12) 
        (apply (apply f_and t122) (sc_not_and_rev_rec t2)))))   ; otherwise not in n-ary form
    (false true))    ; note we must flip true to false
)


(program sc_not_and_rev ((t term)) term
  (nary_elim f_and (sc_not_and_rev_rec t) true)
)

(program sc_process_scope ((t term) (c term)) term
  (let premise (sc_not_and_rev (nary_truncate f_or t c false))
  (match c
    (false (not premise))
    (default (=> premise c)))))
