(program union ((c1 term) (c2 term) (result term) (first_call term)) term
  (match c1
    (
      (apply t1 t2)
      (match t2
        (
          false
          (match t1 
            (  
              (apply t11 t12) 
              (match t11 
                (
                  (apply f_or t112)
                  (match first_call 
                    ( ;; TODO not working :(
                      true 
                      (or true true)
                    )
;                     (true (or t112 (or t12 (or c2 false))))
;                     (false (or result (or (t112 (or t12 (or c2 false))))))
                  )
                )
              )
            )
          )
        )
      )
    ) 
;         ; t2 is (apply t21 t22)
;         ((apply t21 t22) 
;           (match t21
;             ; t2 is (apply (apply f_or t212) t22)
;             ((apply f_or t212) 
;               (match first_call
;                 (true (union t22 c2 t212 false))
;                 (false (union t22 c2 (or result t212) false) )
;               )
;             )
;           )
;         )
    (
      default 
      (fail term)
    )
  )
)

; (program del_first_of ((c term) (t term) (result term) (first_call term)) term 
;   (match c
;     (
;       (apply c1 c2)
;       (match c1
;         (apply f_or c12)
;         (match c12
;           (
;             t 
;             (match first_call (true c2) (false (or result c2)))
;           )
;           (
;             default
;             (match first_call (true (del_first_of c2 t c12 false)) (false (del_first_of c2 t (or result c12) false)))
;           )
;           (match first_call
;             () 
;           )
;           (default (del_first_of c2  t c12 false))
;         )
;       )
;     )
;   )
; )

; (program is_resolvent_two_disjunctions ((c1 term) (c2 term) (pol term) (l term) (c term)) term
;   (match pol
;     (true (isequal c (union (del_first_of c1 l) (del_first_of c2 (not l)) true true)))
;     (false (isequal c (union (del_first_of c1 (not l)) (del_first_of c2 l) true true)))
;     (default (fail term))
;   )
; )

; (program is_resolvent ((c1 term) (c2 term) (pol term) (l term) (c term)) term
;   (match c1
;     (l
;       (match pol
;         (true (isequal c (del_first_of c2 c1)))
;         (default (fail term))
;       ) 
;     )
;     (default
;       (match c2 
;         (l 
;           (match pol
;             (false (isequal c (del_first_of c1 (not c2))))
;             (default (fail term))
;           )
;         )
;         (default (is_resolvent_two_disjunctions c1 c2 pol l c))
;       )
;     )
;   )
; )