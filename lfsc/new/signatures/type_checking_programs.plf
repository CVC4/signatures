; Type checking:

; Return the sort of term t, (fail sort) means not well-sorted
(program type_check ((t term)) sort
  (match t
    ; [1] uninterpreted function symbol
    ((var n s) s)
    ((bvar n s) s)
    ((skolem w) (type_check w))
    ((apply t1 t2)
      (match t1
        ; [2] parametric interpreted function symbols. Note these must have
        ; exceptions in well_typed below.
        (f_= (arrow (type_check t2) Bool))
        ; ...
        ; [3] function applications of non-parametric function symbols
        (default 
          (match (type_check t1)
            ; must be an application of function
            ((arrow sarg sreturn) 
                (ifequal (type_check t2) sarg 
                  sreturn 
                  ; fail: function applied to terms of different sorts
                  (fail sort)))))))

    ; [4] all non-parametric interpreted function symbols
    ; Booleans
    (true Bool)
    (false Bool)
    ((f_ite s) (arrow Bool (arrow s (arrow s s))))
    (f_and (arrow Bool (arrow Bool Bool)))
    (f_or (arrow Bool (arrow Bool Bool)))
    (f_=> (arrow Bool (arrow Bool Bool)))
    (f_xor (arrow Bool (arrow Bool Bool)))
    (f_not (arrow Bool Bool))
    ; Quantifiers
    ((f_forall n s) (arrow Bool Bool))
    ((f_exists n s) (arrow Bool Bool))
    ((f_witness n s) (arrow Bool s))
    ((skolem t1) (type_check t1))
    ; Arithmetic
    ((real n) Real)
    (f_real.+ (arrow Real (arrow Real Real)))
    (f_real.- (arrow Real (arrow Real Real)))
    (f_real.* (arrow Real (arrow Real Real)))
    (f_real./ (arrow Real (arrow Real Real)))
    (f_real./_total (arrow Real (arrow Real Real)))
    (f_real.< (arrow Real (arrow Real Bool)))
    (f_real.<= (arrow Real (arrow Real Bool)))
    (f_real.> (arrow Real (arrow Real Bool)))
    (f_real.>= (arrow Real (arrow Real Bool)))
    ((int n) Int)
    (f_int.+ (arrow Int (arrow Int Int)))
    (f_int.- (arrow Int (arrow Int Int)))
    (f_int.* (arrow Int (arrow Int Int)))
    (f_int.div (arrow Int (arrow Int Int)))
    (f_int.div_total (arrow Int (arrow Int Int)))
    (f_int.mod (arrow Int (arrow Int Int)))
    (f_int.mod_total (arrow Int (arrow Int Int)))
    (f_int.< (arrow Int (arrow Int Bool)))
    (f_int.<= (arrow Int (arrow Int Bool)))
    (f_int.> (arrow Int (arrow Int Bool)))
    (f_int.>= (arrow Int (arrow Int Bool)))
    ; Strings
    (emptystr String)
    ((char n) String)
    (f_str.len (arrow String Int))
    (f_str.++ (arrow String (arrow String String)))
    (f_str.substr (arrow String (arrow Int (arrow Int String))))
    (f_str.contains (arrow String (arrow String Bool)))
    (f_str.replace (arrow String (arrow String (arrow String String))))
    (f_str.indexof (arrow String (arrow String (arrow Int Int))))
    (f_str.prefixof (arrow String (arrow String Bool)))
    (f_str.suffixof (arrow String (arrow String Bool)))
    (f_str.rev (arrow String String))
    (f_str.tolower (arrow String String))
    (f_str.toupper (arrow String String))
    (f_str.to_code (arrow String Int))
    (f_str.from_code (arrow Int String))
    (f_str.is_digit (arrow String Bool))
    (f_str.to_int (arrow String Int))
    (f_str.from_int (arrow Int String))
    (f_str.<= (arrow String (arrow String Bool)))
    (f_str.< (arrow String (arrow String Bool)))
    (re.allchar RegLan)
    (re.none RegLan)
    (re.all RegLan)
    (f_re.* (arrow RegLan RegLan))
    (f_re.opt (arrow RegLan RegLan))
    (f_re.comp (arrow RegLan RegLan))
    (f_re.range (arrow String (arrow String RegLan)))
    (f_re.++ (arrow RegLan (arrow RegLan RegLan)))
    (f_str.to_re (arrow String RegLan))
    (f_re.inter (arrow RegLan (arrow RegLan RegLan)))
    (f_re.union (arrow RegLan (arrow RegLan RegLan)))
    (f_re.diff (arrow RegLan (arrow RegLan RegLan)))
    ((f_re.loop n1 n2) (arrow RegLan RegLan))
    (f_str.in_re (arrow String (arrow RegLan Bool)))
    ; ...
    ; fail: unknown term
  )
)
(program well_typed ((t term)) Ok
  (match t
    ; special case: the equality symbol itself is well-typed
    (f_= ok)
    (default 
      (do (type_check t) ok))))
